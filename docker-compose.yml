version: '3.9'

volumes:
  pgdata:
  static_files:
  media:
  certbot_conf:

networks:
  backend:
  frontend:

services:
  website:
    build: .
    container_name: django
    env_file:
      - .env
    volumes:
      - static_files:/home/myuser/project/static
      - media:/home/myuser/project/media
      - ./logs/django:/home/myuser/project/django_logs:rw
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -f http://localhost:8000' ]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 30s
    restart: always
    user: myuser
    networks:
      - backend
      - frontend

  postgresql:
    image: postgres:12-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./logs/postgres/:/var/log/postgresql:rw
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    restart: always
    networks:
      - backend

  nginx:
    image: nginx:1.25.3-alpine
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/var/www/html/static
      - media:/var/www/media
      - ./certbot/www:/var/www/certbot/:ro
      - certbot_conf:/etc/nginx/ssl/:ro
      - ./logs/nginx:/var/log/nginx/:rw
    depends_on:
      celery:
        condition: service_started
      redis:
        condition: service_started
      website:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    restart: always
    networks:
      - frontend

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - certbot_conf:/etc/letsencrypt/:rw
      - ./logs/certbot/:/var/log/letsencrypt/:rw
    networks:
      - backend
      - frontend

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - ./logs/redis/:/var/log/redis/redis-server.log/:rw
    networks:
      - backend
    depends_on:
      website:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    restart: always

  celery:
    build:
      context: .
    container_name: celery
    entrypoint: python -m celery -A employe worker -c 1 --loglevel=warning --logfile=celery_logs/celery.log
    volumes:
      - ./logs/celery:/home/myuser/project/celery_logs/:rw
    depends_on:
      redis:
        condition: service_started
      website:
        condition: service_healthy
    networks:
      - backend
    env_file:
      - .env
    restart: always
    user: myuser